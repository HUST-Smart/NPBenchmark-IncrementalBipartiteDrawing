// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IncrementalGraphDrawing.proto

#ifndef PROTOBUF_INCLUDED_IncrementalGraphDrawing_2eproto
#define PROTOBUF_INCLUDED_IncrementalGraphDrawing_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_IncrementalGraphDrawing_2eproto 

namespace protobuf_IncrementalGraphDrawing_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_IncrementalGraphDrawing_2eproto
namespace pb {
class IncrementalGraphDrawing;
class IncrementalGraphDrawingDefaultTypeInternal;
extern IncrementalGraphDrawingDefaultTypeInternal _IncrementalGraphDrawing_default_instance_;
class IncrementalGraphDrawing_Input;
class IncrementalGraphDrawing_InputDefaultTypeInternal;
extern IncrementalGraphDrawing_InputDefaultTypeInternal _IncrementalGraphDrawing_Input_default_instance_;
class IncrementalGraphDrawing_Layer;
class IncrementalGraphDrawing_LayerDefaultTypeInternal;
extern IncrementalGraphDrawing_LayerDefaultTypeInternal _IncrementalGraphDrawing_Layer_default_instance_;
class IncrementalGraphDrawing_LayeredGraph;
class IncrementalGraphDrawing_LayeredGraphDefaultTypeInternal;
extern IncrementalGraphDrawing_LayeredGraphDefaultTypeInternal _IncrementalGraphDrawing_LayeredGraph_default_instance_;
class IncrementalGraphDrawing_NodeList;
class IncrementalGraphDrawing_NodeListDefaultTypeInternal;
extern IncrementalGraphDrawing_NodeListDefaultTypeInternal _IncrementalGraphDrawing_NodeList_default_instance_;
class IncrementalGraphDrawing_Output;
class IncrementalGraphDrawing_OutputDefaultTypeInternal;
extern IncrementalGraphDrawing_OutputDefaultTypeInternal _IncrementalGraphDrawing_Output_default_instance_;
class Submission;
class SubmissionDefaultTypeInternal;
extern SubmissionDefaultTypeInternal _Submission_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::IncrementalGraphDrawing* Arena::CreateMaybeMessage<::pb::IncrementalGraphDrawing>(Arena*);
template<> ::pb::IncrementalGraphDrawing_Input* Arena::CreateMaybeMessage<::pb::IncrementalGraphDrawing_Input>(Arena*);
template<> ::pb::IncrementalGraphDrawing_Layer* Arena::CreateMaybeMessage<::pb::IncrementalGraphDrawing_Layer>(Arena*);
template<> ::pb::IncrementalGraphDrawing_LayeredGraph* Arena::CreateMaybeMessage<::pb::IncrementalGraphDrawing_LayeredGraph>(Arena*);
template<> ::pb::IncrementalGraphDrawing_NodeList* Arena::CreateMaybeMessage<::pb::IncrementalGraphDrawing_NodeList>(Arena*);
template<> ::pb::IncrementalGraphDrawing_Output* Arena::CreateMaybeMessage<::pb::IncrementalGraphDrawing_Output>(Arena*);
template<> ::pb::Submission* Arena::CreateMaybeMessage<::pb::Submission>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class IncrementalGraphDrawing_Input : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.IncrementalGraphDrawing.Input) */ {
 public:
  IncrementalGraphDrawing_Input();
  virtual ~IncrementalGraphDrawing_Input();

  IncrementalGraphDrawing_Input(const IncrementalGraphDrawing_Input& from);

  inline IncrementalGraphDrawing_Input& operator=(const IncrementalGraphDrawing_Input& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncrementalGraphDrawing_Input(IncrementalGraphDrawing_Input&& from) noexcept
    : IncrementalGraphDrawing_Input() {
    *this = ::std::move(from);
  }

  inline IncrementalGraphDrawing_Input& operator=(IncrementalGraphDrawing_Input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IncrementalGraphDrawing_Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementalGraphDrawing_Input* internal_default_instance() {
    return reinterpret_cast<const IncrementalGraphDrawing_Input*>(
               &_IncrementalGraphDrawing_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IncrementalGraphDrawing_Input* other);
  friend void swap(IncrementalGraphDrawing_Input& a, IncrementalGraphDrawing_Input& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncrementalGraphDrawing_Input* New() const final {
    return CreateMaybeMessage<IncrementalGraphDrawing_Input>(NULL);
  }

  IncrementalGraphDrawing_Input* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncrementalGraphDrawing_Input>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IncrementalGraphDrawing_Input& from);
  void MergeFrom(const IncrementalGraphDrawing_Input& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalGraphDrawing_Input* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.IncrementalGraphDrawing.LayeredGraph graph = 1;
  bool has_graph() const;
  void clear_graph();
  static const int kGraphFieldNumber = 1;
  private:
  const ::pb::IncrementalGraphDrawing_LayeredGraph& _internal_graph() const;
  public:
  const ::pb::IncrementalGraphDrawing_LayeredGraph& graph() const;
  ::pb::IncrementalGraphDrawing_LayeredGraph* release_graph();
  ::pb::IncrementalGraphDrawing_LayeredGraph* mutable_graph();
  void set_allocated_graph(::pb::IncrementalGraphDrawing_LayeredGraph* graph);

  // @@protoc_insertion_point(class_scope:pb.IncrementalGraphDrawing.Input)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::IncrementalGraphDrawing_LayeredGraph* graph_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IncrementalGraphDrawing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IncrementalGraphDrawing_Output : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.IncrementalGraphDrawing.Output) */ {
 public:
  IncrementalGraphDrawing_Output();
  virtual ~IncrementalGraphDrawing_Output();

  IncrementalGraphDrawing_Output(const IncrementalGraphDrawing_Output& from);

  inline IncrementalGraphDrawing_Output& operator=(const IncrementalGraphDrawing_Output& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncrementalGraphDrawing_Output(IncrementalGraphDrawing_Output&& from) noexcept
    : IncrementalGraphDrawing_Output() {
    *this = ::std::move(from);
  }

  inline IncrementalGraphDrawing_Output& operator=(IncrementalGraphDrawing_Output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IncrementalGraphDrawing_Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementalGraphDrawing_Output* internal_default_instance() {
    return reinterpret_cast<const IncrementalGraphDrawing_Output*>(
               &_IncrementalGraphDrawing_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IncrementalGraphDrawing_Output* other);
  friend void swap(IncrementalGraphDrawing_Output& a, IncrementalGraphDrawing_Output& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncrementalGraphDrawing_Output* New() const final {
    return CreateMaybeMessage<IncrementalGraphDrawing_Output>(NULL);
  }

  IncrementalGraphDrawing_Output* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncrementalGraphDrawing_Output>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IncrementalGraphDrawing_Output& from);
  void MergeFrom(const IncrementalGraphDrawing_Output& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalGraphDrawing_Output* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.IncrementalGraphDrawing.NodeList orders = 1;
  int orders_size() const;
  void clear_orders();
  static const int kOrdersFieldNumber = 1;
  ::pb::IncrementalGraphDrawing_NodeList* mutable_orders(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_NodeList >*
      mutable_orders();
  const ::pb::IncrementalGraphDrawing_NodeList& orders(int index) const;
  ::pb::IncrementalGraphDrawing_NodeList* add_orders();
  const ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_NodeList >&
      orders() const;

  // @@protoc_insertion_point(class_scope:pb.IncrementalGraphDrawing.Output)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_NodeList > orders_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IncrementalGraphDrawing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IncrementalGraphDrawing_LayeredGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.IncrementalGraphDrawing.LayeredGraph) */ {
 public:
  IncrementalGraphDrawing_LayeredGraph();
  virtual ~IncrementalGraphDrawing_LayeredGraph();

  IncrementalGraphDrawing_LayeredGraph(const IncrementalGraphDrawing_LayeredGraph& from);

  inline IncrementalGraphDrawing_LayeredGraph& operator=(const IncrementalGraphDrawing_LayeredGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncrementalGraphDrawing_LayeredGraph(IncrementalGraphDrawing_LayeredGraph&& from) noexcept
    : IncrementalGraphDrawing_LayeredGraph() {
    *this = ::std::move(from);
  }

  inline IncrementalGraphDrawing_LayeredGraph& operator=(IncrementalGraphDrawing_LayeredGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IncrementalGraphDrawing_LayeredGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementalGraphDrawing_LayeredGraph* internal_default_instance() {
    return reinterpret_cast<const IncrementalGraphDrawing_LayeredGraph*>(
               &_IncrementalGraphDrawing_LayeredGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(IncrementalGraphDrawing_LayeredGraph* other);
  friend void swap(IncrementalGraphDrawing_LayeredGraph& a, IncrementalGraphDrawing_LayeredGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncrementalGraphDrawing_LayeredGraph* New() const final {
    return CreateMaybeMessage<IncrementalGraphDrawing_LayeredGraph>(NULL);
  }

  IncrementalGraphDrawing_LayeredGraph* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncrementalGraphDrawing_LayeredGraph>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IncrementalGraphDrawing_LayeredGraph& from);
  void MergeFrom(const IncrementalGraphDrawing_LayeredGraph& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalGraphDrawing_LayeredGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.IncrementalGraphDrawing.Layer layers = 1;
  int layers_size() const;
  void clear_layers();
  static const int kLayersFieldNumber = 1;
  ::pb::IncrementalGraphDrawing_Layer* mutable_layers(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_Layer >*
      mutable_layers();
  const ::pb::IncrementalGraphDrawing_Layer& layers(int index) const;
  ::pb::IncrementalGraphDrawing_Layer* add_layers();
  const ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_Layer >&
      layers() const;

  // int32 oldNodeNum = 2;
  void clear_oldnodenum();
  static const int kOldNodeNumFieldNumber = 2;
  ::google::protobuf::int32 oldnodenum() const;
  void set_oldnodenum(::google::protobuf::int32 value);

  // int32 nodeNum = 4;
  void clear_nodenum();
  static const int kNodeNumFieldNumber = 4;
  ::google::protobuf::int32 nodenum() const;
  void set_nodenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.IncrementalGraphDrawing.LayeredGraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_Layer > layers_;
  ::google::protobuf::int32 oldnodenum_;
  ::google::protobuf::int32 nodenum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IncrementalGraphDrawing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IncrementalGraphDrawing_Layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.IncrementalGraphDrawing.Layer) */ {
 public:
  IncrementalGraphDrawing_Layer();
  virtual ~IncrementalGraphDrawing_Layer();

  IncrementalGraphDrawing_Layer(const IncrementalGraphDrawing_Layer& from);

  inline IncrementalGraphDrawing_Layer& operator=(const IncrementalGraphDrawing_Layer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncrementalGraphDrawing_Layer(IncrementalGraphDrawing_Layer&& from) noexcept
    : IncrementalGraphDrawing_Layer() {
    *this = ::std::move(from);
  }

  inline IncrementalGraphDrawing_Layer& operator=(IncrementalGraphDrawing_Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IncrementalGraphDrawing_Layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementalGraphDrawing_Layer* internal_default_instance() {
    return reinterpret_cast<const IncrementalGraphDrawing_Layer*>(
               &_IncrementalGraphDrawing_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(IncrementalGraphDrawing_Layer* other);
  friend void swap(IncrementalGraphDrawing_Layer& a, IncrementalGraphDrawing_Layer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncrementalGraphDrawing_Layer* New() const final {
    return CreateMaybeMessage<IncrementalGraphDrawing_Layer>(NULL);
  }

  IncrementalGraphDrawing_Layer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncrementalGraphDrawing_Layer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IncrementalGraphDrawing_Layer& from);
  void MergeFrom(const IncrementalGraphDrawing_Layer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalGraphDrawing_Layer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.IncrementalGraphDrawing.NodeList forwardLists = 4;
  int forwardlists_size() const;
  void clear_forwardlists();
  static const int kForwardListsFieldNumber = 4;
  ::pb::IncrementalGraphDrawing_NodeList* mutable_forwardlists(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_NodeList >*
      mutable_forwardlists();
  const ::pb::IncrementalGraphDrawing_NodeList& forwardlists(int index) const;
  ::pb::IncrementalGraphDrawing_NodeList* add_forwardlists();
  const ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_NodeList >&
      forwardlists() const;

  // int32 oldNodeNum = 1;
  void clear_oldnodenum();
  static const int kOldNodeNumFieldNumber = 1;
  ::google::protobuf::int32 oldnodenum() const;
  void set_oldnodenum(::google::protobuf::int32 value);

  // int32 nodeNum = 3;
  void clear_nodenum();
  static const int kNodeNumFieldNumber = 3;
  ::google::protobuf::int32 nodenum() const;
  void set_nodenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.IncrementalGraphDrawing.Layer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_NodeList > forwardlists_;
  ::google::protobuf::int32 oldnodenum_;
  ::google::protobuf::int32 nodenum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IncrementalGraphDrawing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IncrementalGraphDrawing_NodeList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.IncrementalGraphDrawing.NodeList) */ {
 public:
  IncrementalGraphDrawing_NodeList();
  virtual ~IncrementalGraphDrawing_NodeList();

  IncrementalGraphDrawing_NodeList(const IncrementalGraphDrawing_NodeList& from);

  inline IncrementalGraphDrawing_NodeList& operator=(const IncrementalGraphDrawing_NodeList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncrementalGraphDrawing_NodeList(IncrementalGraphDrawing_NodeList&& from) noexcept
    : IncrementalGraphDrawing_NodeList() {
    *this = ::std::move(from);
  }

  inline IncrementalGraphDrawing_NodeList& operator=(IncrementalGraphDrawing_NodeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IncrementalGraphDrawing_NodeList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementalGraphDrawing_NodeList* internal_default_instance() {
    return reinterpret_cast<const IncrementalGraphDrawing_NodeList*>(
               &_IncrementalGraphDrawing_NodeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(IncrementalGraphDrawing_NodeList* other);
  friend void swap(IncrementalGraphDrawing_NodeList& a, IncrementalGraphDrawing_NodeList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncrementalGraphDrawing_NodeList* New() const final {
    return CreateMaybeMessage<IncrementalGraphDrawing_NodeList>(NULL);
  }

  IncrementalGraphDrawing_NodeList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncrementalGraphDrawing_NodeList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IncrementalGraphDrawing_NodeList& from);
  void MergeFrom(const IncrementalGraphDrawing_NodeList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalGraphDrawing_NodeList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::google::protobuf::int32 nodes(int index) const;
  void set_nodes(int index, ::google::protobuf::int32 value);
  void add_nodes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nodes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:pb.IncrementalGraphDrawing.NodeList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nodes_;
  mutable int _nodes_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IncrementalGraphDrawing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IncrementalGraphDrawing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.IncrementalGraphDrawing) */ {
 public:
  IncrementalGraphDrawing();
  virtual ~IncrementalGraphDrawing();

  IncrementalGraphDrawing(const IncrementalGraphDrawing& from);

  inline IncrementalGraphDrawing& operator=(const IncrementalGraphDrawing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncrementalGraphDrawing(IncrementalGraphDrawing&& from) noexcept
    : IncrementalGraphDrawing() {
    *this = ::std::move(from);
  }

  inline IncrementalGraphDrawing& operator=(IncrementalGraphDrawing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IncrementalGraphDrawing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementalGraphDrawing* internal_default_instance() {
    return reinterpret_cast<const IncrementalGraphDrawing*>(
               &_IncrementalGraphDrawing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(IncrementalGraphDrawing* other);
  friend void swap(IncrementalGraphDrawing& a, IncrementalGraphDrawing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncrementalGraphDrawing* New() const final {
    return CreateMaybeMessage<IncrementalGraphDrawing>(NULL);
  }

  IncrementalGraphDrawing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncrementalGraphDrawing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IncrementalGraphDrawing& from);
  void MergeFrom(const IncrementalGraphDrawing& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalGraphDrawing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IncrementalGraphDrawing_Input Input;
  typedef IncrementalGraphDrawing_Output Output;
  typedef IncrementalGraphDrawing_LayeredGraph LayeredGraph;
  typedef IncrementalGraphDrawing_Layer Layer;
  typedef IncrementalGraphDrawing_NodeList NodeList;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.IncrementalGraphDrawing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IncrementalGraphDrawing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Submission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Submission) */ {
 public:
  Submission();
  virtual ~Submission();

  Submission(const Submission& from);

  inline Submission& operator=(const Submission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Submission(Submission&& from) noexcept
    : Submission() {
    *this = ::std::move(from);
  }

  inline Submission& operator=(Submission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Submission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Submission* internal_default_instance() {
    return reinterpret_cast<const Submission*>(
               &_Submission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Submission* other);
  friend void swap(Submission& a, Submission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Submission* New() const final {
    return CreateMaybeMessage<Submission>(NULL);
  }

  Submission* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Submission>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Submission& from);
  void MergeFrom(const Submission& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Submission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string author = 1;
  void clear_author();
  static const int kAuthorFieldNumber = 1;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // string algorithm = 2;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 2;
  const ::std::string& algorithm() const;
  void set_algorithm(const ::std::string& value);
  #if LANG_CXX11
  void set_algorithm(::std::string&& value);
  #endif
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  ::std::string* mutable_algorithm();
  ::std::string* release_algorithm();
  void set_allocated_algorithm(::std::string* algorithm);

  // string thread = 3;
  void clear_thread();
  static const int kThreadFieldNumber = 3;
  const ::std::string& thread() const;
  void set_thread(const ::std::string& value);
  #if LANG_CXX11
  void set_thread(::std::string&& value);
  #endif
  void set_thread(const char* value);
  void set_thread(const char* value, size_t size);
  ::std::string* mutable_thread();
  ::std::string* release_thread();
  void set_allocated_thread(::std::string* thread);

  // string cpu = 4;
  void clear_cpu();
  static const int kCpuFieldNumber = 4;
  const ::std::string& cpu() const;
  void set_cpu(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu(::std::string&& value);
  #endif
  void set_cpu(const char* value);
  void set_cpu(const char* value, size_t size);
  ::std::string* mutable_cpu();
  ::std::string* release_cpu();
  void set_allocated_cpu(::std::string* cpu);

  // string ram = 5;
  void clear_ram();
  static const int kRamFieldNumber = 5;
  const ::std::string& ram() const;
  void set_ram(const ::std::string& value);
  #if LANG_CXX11
  void set_ram(::std::string&& value);
  #endif
  void set_ram(const char* value);
  void set_ram(const char* value, size_t size);
  ::std::string* mutable_ram();
  ::std::string* release_ram();
  void set_allocated_ram(::std::string* ram);

  // string language = 6;
  void clear_language();
  static const int kLanguageFieldNumber = 6;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // string compiler = 7;
  void clear_compiler();
  static const int kCompilerFieldNumber = 7;
  const ::std::string& compiler() const;
  void set_compiler(const ::std::string& value);
  #if LANG_CXX11
  void set_compiler(::std::string&& value);
  #endif
  void set_compiler(const char* value);
  void set_compiler(const char* value, size_t size);
  ::std::string* mutable_compiler();
  ::std::string* release_compiler();
  void set_allocated_compiler(::std::string* compiler);

  // string os = 8;
  void clear_os();
  static const int kOsFieldNumber = 8;
  const ::std::string& os() const;
  void set_os(const ::std::string& value);
  #if LANG_CXX11
  void set_os(::std::string&& value);
  #endif
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  ::std::string* mutable_os();
  ::std::string* release_os();
  void set_allocated_os(::std::string* os);

  // string problem = 21;
  void clear_problem();
  static const int kProblemFieldNumber = 21;
  const ::std::string& problem() const;
  void set_problem(const ::std::string& value);
  #if LANG_CXX11
  void set_problem(::std::string&& value);
  #endif
  void set_problem(const char* value);
  void set_problem(const char* value, size_t size);
  ::std::string* mutable_problem();
  ::std::string* release_problem();
  void set_allocated_problem(::std::string* problem);

  // string instance = 22;
  void clear_instance();
  static const int kInstanceFieldNumber = 22;
  const ::std::string& instance() const;
  void set_instance(const ::std::string& value);
  #if LANG_CXX11
  void set_instance(::std::string&& value);
  #endif
  void set_instance(const char* value);
  void set_instance(const char* value, size_t size);
  ::std::string* mutable_instance();
  ::std::string* release_instance();
  void set_allocated_instance(::std::string* instance);

  // string duration = 23;
  void clear_duration();
  static const int kDurationFieldNumber = 23;
  const ::std::string& duration() const;
  void set_duration(const ::std::string& value);
  #if LANG_CXX11
  void set_duration(::std::string&& value);
  #endif
  void set_duration(const char* value);
  void set_duration(const char* value, size_t size);
  ::std::string* mutable_duration();
  ::std::string* release_duration();
  void set_allocated_duration(::std::string* duration);

  // string email = 32;
  void clear_email();
  static const int kEmailFieldNumber = 32;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string date = 33;
  void clear_date();
  static const int kDateFieldNumber = 33;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // double obj = 31;
  void clear_obj();
  static const int kObjFieldNumber = 31;
  double obj() const;
  void set_obj(double value);

  // @@protoc_insertion_point(class_scope:pb.Submission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr algorithm_;
  ::google::protobuf::internal::ArenaStringPtr thread_;
  ::google::protobuf::internal::ArenaStringPtr cpu_;
  ::google::protobuf::internal::ArenaStringPtr ram_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr compiler_;
  ::google::protobuf::internal::ArenaStringPtr os_;
  ::google::protobuf::internal::ArenaStringPtr problem_;
  ::google::protobuf::internal::ArenaStringPtr instance_;
  ::google::protobuf::internal::ArenaStringPtr duration_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  double obj_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IncrementalGraphDrawing_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IncrementalGraphDrawing_Input

// .pb.IncrementalGraphDrawing.LayeredGraph graph = 1;
inline bool IncrementalGraphDrawing_Input::has_graph() const {
  return this != internal_default_instance() && graph_ != NULL;
}
inline void IncrementalGraphDrawing_Input::clear_graph() {
  if (GetArenaNoVirtual() == NULL && graph_ != NULL) {
    delete graph_;
  }
  graph_ = NULL;
}
inline const ::pb::IncrementalGraphDrawing_LayeredGraph& IncrementalGraphDrawing_Input::_internal_graph() const {
  return *graph_;
}
inline const ::pb::IncrementalGraphDrawing_LayeredGraph& IncrementalGraphDrawing_Input::graph() const {
  const ::pb::IncrementalGraphDrawing_LayeredGraph* p = graph_;
  // @@protoc_insertion_point(field_get:pb.IncrementalGraphDrawing.Input.graph)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::IncrementalGraphDrawing_LayeredGraph*>(
      &::pb::_IncrementalGraphDrawing_LayeredGraph_default_instance_);
}
inline ::pb::IncrementalGraphDrawing_LayeredGraph* IncrementalGraphDrawing_Input::release_graph() {
  // @@protoc_insertion_point(field_release:pb.IncrementalGraphDrawing.Input.graph)
  
  ::pb::IncrementalGraphDrawing_LayeredGraph* temp = graph_;
  graph_ = NULL;
  return temp;
}
inline ::pb::IncrementalGraphDrawing_LayeredGraph* IncrementalGraphDrawing_Input::mutable_graph() {
  
  if (graph_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::IncrementalGraphDrawing_LayeredGraph>(GetArenaNoVirtual());
    graph_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.IncrementalGraphDrawing.Input.graph)
  return graph_;
}
inline void IncrementalGraphDrawing_Input::set_allocated_graph(::pb::IncrementalGraphDrawing_LayeredGraph* graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_;
  }
  if (graph) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      graph = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:pb.IncrementalGraphDrawing.Input.graph)
}

// -------------------------------------------------------------------

// IncrementalGraphDrawing_Output

// repeated .pb.IncrementalGraphDrawing.NodeList orders = 1;
inline int IncrementalGraphDrawing_Output::orders_size() const {
  return orders_.size();
}
inline void IncrementalGraphDrawing_Output::clear_orders() {
  orders_.Clear();
}
inline ::pb::IncrementalGraphDrawing_NodeList* IncrementalGraphDrawing_Output::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:pb.IncrementalGraphDrawing.Output.orders)
  return orders_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_NodeList >*
IncrementalGraphDrawing_Output::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:pb.IncrementalGraphDrawing.Output.orders)
  return &orders_;
}
inline const ::pb::IncrementalGraphDrawing_NodeList& IncrementalGraphDrawing_Output::orders(int index) const {
  // @@protoc_insertion_point(field_get:pb.IncrementalGraphDrawing.Output.orders)
  return orders_.Get(index);
}
inline ::pb::IncrementalGraphDrawing_NodeList* IncrementalGraphDrawing_Output::add_orders() {
  // @@protoc_insertion_point(field_add:pb.IncrementalGraphDrawing.Output.orders)
  return orders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_NodeList >&
IncrementalGraphDrawing_Output::orders() const {
  // @@protoc_insertion_point(field_list:pb.IncrementalGraphDrawing.Output.orders)
  return orders_;
}

// -------------------------------------------------------------------

// IncrementalGraphDrawing_LayeredGraph

// repeated .pb.IncrementalGraphDrawing.Layer layers = 1;
inline int IncrementalGraphDrawing_LayeredGraph::layers_size() const {
  return layers_.size();
}
inline void IncrementalGraphDrawing_LayeredGraph::clear_layers() {
  layers_.Clear();
}
inline ::pb::IncrementalGraphDrawing_Layer* IncrementalGraphDrawing_LayeredGraph::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:pb.IncrementalGraphDrawing.LayeredGraph.layers)
  return layers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_Layer >*
IncrementalGraphDrawing_LayeredGraph::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:pb.IncrementalGraphDrawing.LayeredGraph.layers)
  return &layers_;
}
inline const ::pb::IncrementalGraphDrawing_Layer& IncrementalGraphDrawing_LayeredGraph::layers(int index) const {
  // @@protoc_insertion_point(field_get:pb.IncrementalGraphDrawing.LayeredGraph.layers)
  return layers_.Get(index);
}
inline ::pb::IncrementalGraphDrawing_Layer* IncrementalGraphDrawing_LayeredGraph::add_layers() {
  // @@protoc_insertion_point(field_add:pb.IncrementalGraphDrawing.LayeredGraph.layers)
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_Layer >&
IncrementalGraphDrawing_LayeredGraph::layers() const {
  // @@protoc_insertion_point(field_list:pb.IncrementalGraphDrawing.LayeredGraph.layers)
  return layers_;
}

// int32 oldNodeNum = 2;
inline void IncrementalGraphDrawing_LayeredGraph::clear_oldnodenum() {
  oldnodenum_ = 0;
}
inline ::google::protobuf::int32 IncrementalGraphDrawing_LayeredGraph::oldnodenum() const {
  // @@protoc_insertion_point(field_get:pb.IncrementalGraphDrawing.LayeredGraph.oldNodeNum)
  return oldnodenum_;
}
inline void IncrementalGraphDrawing_LayeredGraph::set_oldnodenum(::google::protobuf::int32 value) {
  
  oldnodenum_ = value;
  // @@protoc_insertion_point(field_set:pb.IncrementalGraphDrawing.LayeredGraph.oldNodeNum)
}

// int32 nodeNum = 4;
inline void IncrementalGraphDrawing_LayeredGraph::clear_nodenum() {
  nodenum_ = 0;
}
inline ::google::protobuf::int32 IncrementalGraphDrawing_LayeredGraph::nodenum() const {
  // @@protoc_insertion_point(field_get:pb.IncrementalGraphDrawing.LayeredGraph.nodeNum)
  return nodenum_;
}
inline void IncrementalGraphDrawing_LayeredGraph::set_nodenum(::google::protobuf::int32 value) {
  
  nodenum_ = value;
  // @@protoc_insertion_point(field_set:pb.IncrementalGraphDrawing.LayeredGraph.nodeNum)
}

// -------------------------------------------------------------------

// IncrementalGraphDrawing_Layer

// int32 oldNodeNum = 1;
inline void IncrementalGraphDrawing_Layer::clear_oldnodenum() {
  oldnodenum_ = 0;
}
inline ::google::protobuf::int32 IncrementalGraphDrawing_Layer::oldnodenum() const {
  // @@protoc_insertion_point(field_get:pb.IncrementalGraphDrawing.Layer.oldNodeNum)
  return oldnodenum_;
}
inline void IncrementalGraphDrawing_Layer::set_oldnodenum(::google::protobuf::int32 value) {
  
  oldnodenum_ = value;
  // @@protoc_insertion_point(field_set:pb.IncrementalGraphDrawing.Layer.oldNodeNum)
}

// int32 nodeNum = 3;
inline void IncrementalGraphDrawing_Layer::clear_nodenum() {
  nodenum_ = 0;
}
inline ::google::protobuf::int32 IncrementalGraphDrawing_Layer::nodenum() const {
  // @@protoc_insertion_point(field_get:pb.IncrementalGraphDrawing.Layer.nodeNum)
  return nodenum_;
}
inline void IncrementalGraphDrawing_Layer::set_nodenum(::google::protobuf::int32 value) {
  
  nodenum_ = value;
  // @@protoc_insertion_point(field_set:pb.IncrementalGraphDrawing.Layer.nodeNum)
}

// repeated .pb.IncrementalGraphDrawing.NodeList forwardLists = 4;
inline int IncrementalGraphDrawing_Layer::forwardlists_size() const {
  return forwardlists_.size();
}
inline void IncrementalGraphDrawing_Layer::clear_forwardlists() {
  forwardlists_.Clear();
}
inline ::pb::IncrementalGraphDrawing_NodeList* IncrementalGraphDrawing_Layer::mutable_forwardlists(int index) {
  // @@protoc_insertion_point(field_mutable:pb.IncrementalGraphDrawing.Layer.forwardLists)
  return forwardlists_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_NodeList >*
IncrementalGraphDrawing_Layer::mutable_forwardlists() {
  // @@protoc_insertion_point(field_mutable_list:pb.IncrementalGraphDrawing.Layer.forwardLists)
  return &forwardlists_;
}
inline const ::pb::IncrementalGraphDrawing_NodeList& IncrementalGraphDrawing_Layer::forwardlists(int index) const {
  // @@protoc_insertion_point(field_get:pb.IncrementalGraphDrawing.Layer.forwardLists)
  return forwardlists_.Get(index);
}
inline ::pb::IncrementalGraphDrawing_NodeList* IncrementalGraphDrawing_Layer::add_forwardlists() {
  // @@protoc_insertion_point(field_add:pb.IncrementalGraphDrawing.Layer.forwardLists)
  return forwardlists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::IncrementalGraphDrawing_NodeList >&
IncrementalGraphDrawing_Layer::forwardlists() const {
  // @@protoc_insertion_point(field_list:pb.IncrementalGraphDrawing.Layer.forwardLists)
  return forwardlists_;
}

// -------------------------------------------------------------------

// IncrementalGraphDrawing_NodeList

// repeated int32 nodes = 1;
inline int IncrementalGraphDrawing_NodeList::nodes_size() const {
  return nodes_.size();
}
inline void IncrementalGraphDrawing_NodeList::clear_nodes() {
  nodes_.Clear();
}
inline ::google::protobuf::int32 IncrementalGraphDrawing_NodeList::nodes(int index) const {
  // @@protoc_insertion_point(field_get:pb.IncrementalGraphDrawing.NodeList.nodes)
  return nodes_.Get(index);
}
inline void IncrementalGraphDrawing_NodeList::set_nodes(int index, ::google::protobuf::int32 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.IncrementalGraphDrawing.NodeList.nodes)
}
inline void IncrementalGraphDrawing_NodeList::add_nodes(::google::protobuf::int32 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:pb.IncrementalGraphDrawing.NodeList.nodes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IncrementalGraphDrawing_NodeList::nodes() const {
  // @@protoc_insertion_point(field_list:pb.IncrementalGraphDrawing.NodeList.nodes)
  return nodes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IncrementalGraphDrawing_NodeList::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:pb.IncrementalGraphDrawing.NodeList.nodes)
  return &nodes_;
}

// -------------------------------------------------------------------

// IncrementalGraphDrawing

// -------------------------------------------------------------------

// Submission

// string author = 1;
inline void Submission::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::author() const {
  // @@protoc_insertion_point(field_get:pb.Submission.author)
  return author_.GetNoArena();
}
inline void Submission::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.author)
}
#if LANG_CXX11
inline void Submission::set_author(::std::string&& value) {
  
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.author)
}
#endif
inline void Submission::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.author)
}
inline void Submission::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.author)
}
inline ::std::string* Submission::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_author() {
  // @@protoc_insertion_point(field_release:pb.Submission.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.author)
}

// string algorithm = 2;
inline void Submission::clear_algorithm() {
  algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::algorithm() const {
  // @@protoc_insertion_point(field_get:pb.Submission.algorithm)
  return algorithm_.GetNoArena();
}
inline void Submission::set_algorithm(const ::std::string& value) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.algorithm)
}
#if LANG_CXX11
inline void Submission::set_algorithm(::std::string&& value) {
  
  algorithm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.algorithm)
}
#endif
inline void Submission::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.algorithm)
}
inline void Submission::set_algorithm(const char* value, size_t size) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.algorithm)
}
inline ::std::string* Submission::mutable_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.algorithm)
  return algorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_algorithm() {
  // @@protoc_insertion_point(field_release:pb.Submission.algorithm)
  
  return algorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_algorithm(::std::string* algorithm) {
  if (algorithm != NULL) {
    
  } else {
    
  }
  algorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algorithm);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.algorithm)
}

// string thread = 3;
inline void Submission::clear_thread() {
  thread_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::thread() const {
  // @@protoc_insertion_point(field_get:pb.Submission.thread)
  return thread_.GetNoArena();
}
inline void Submission::set_thread(const ::std::string& value) {
  
  thread_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.thread)
}
#if LANG_CXX11
inline void Submission::set_thread(::std::string&& value) {
  
  thread_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.thread)
}
#endif
inline void Submission::set_thread(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thread_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.thread)
}
inline void Submission::set_thread(const char* value, size_t size) {
  
  thread_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.thread)
}
inline ::std::string* Submission::mutable_thread() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.thread)
  return thread_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_thread() {
  // @@protoc_insertion_point(field_release:pb.Submission.thread)
  
  return thread_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_thread(::std::string* thread) {
  if (thread != NULL) {
    
  } else {
    
  }
  thread_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thread);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.thread)
}

// string cpu = 4;
inline void Submission::clear_cpu() {
  cpu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::cpu() const {
  // @@protoc_insertion_point(field_get:pb.Submission.cpu)
  return cpu_.GetNoArena();
}
inline void Submission::set_cpu(const ::std::string& value) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.cpu)
}
#if LANG_CXX11
inline void Submission::set_cpu(::std::string&& value) {
  
  cpu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.cpu)
}
#endif
inline void Submission::set_cpu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.cpu)
}
inline void Submission::set_cpu(const char* value, size_t size) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.cpu)
}
inline ::std::string* Submission::mutable_cpu() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.cpu)
  return cpu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_cpu() {
  // @@protoc_insertion_point(field_release:pb.Submission.cpu)
  
  return cpu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_cpu(::std::string* cpu) {
  if (cpu != NULL) {
    
  } else {
    
  }
  cpu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.cpu)
}

// string ram = 5;
inline void Submission::clear_ram() {
  ram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::ram() const {
  // @@protoc_insertion_point(field_get:pb.Submission.ram)
  return ram_.GetNoArena();
}
inline void Submission::set_ram(const ::std::string& value) {
  
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.ram)
}
#if LANG_CXX11
inline void Submission::set_ram(::std::string&& value) {
  
  ram_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.ram)
}
#endif
inline void Submission::set_ram(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.ram)
}
inline void Submission::set_ram(const char* value, size_t size) {
  
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.ram)
}
inline ::std::string* Submission::mutable_ram() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.ram)
  return ram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_ram() {
  // @@protoc_insertion_point(field_release:pb.Submission.ram)
  
  return ram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_ram(::std::string* ram) {
  if (ram != NULL) {
    
  } else {
    
  }
  ram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ram);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.ram)
}

// string language = 6;
inline void Submission::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::language() const {
  // @@protoc_insertion_point(field_get:pb.Submission.language)
  return language_.GetNoArena();
}
inline void Submission::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.language)
}
#if LANG_CXX11
inline void Submission::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.language)
}
#endif
inline void Submission::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.language)
}
inline void Submission::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.language)
}
inline ::std::string* Submission::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_language() {
  // @@protoc_insertion_point(field_release:pb.Submission.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.language)
}

// string compiler = 7;
inline void Submission::clear_compiler() {
  compiler_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::compiler() const {
  // @@protoc_insertion_point(field_get:pb.Submission.compiler)
  return compiler_.GetNoArena();
}
inline void Submission::set_compiler(const ::std::string& value) {
  
  compiler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.compiler)
}
#if LANG_CXX11
inline void Submission::set_compiler(::std::string&& value) {
  
  compiler_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.compiler)
}
#endif
inline void Submission::set_compiler(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compiler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.compiler)
}
inline void Submission::set_compiler(const char* value, size_t size) {
  
  compiler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.compiler)
}
inline ::std::string* Submission::mutable_compiler() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.compiler)
  return compiler_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_compiler() {
  // @@protoc_insertion_point(field_release:pb.Submission.compiler)
  
  return compiler_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_compiler(::std::string* compiler) {
  if (compiler != NULL) {
    
  } else {
    
  }
  compiler_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compiler);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.compiler)
}

// string os = 8;
inline void Submission::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::os() const {
  // @@protoc_insertion_point(field_get:pb.Submission.os)
  return os_.GetNoArena();
}
inline void Submission::set_os(const ::std::string& value) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.os)
}
#if LANG_CXX11
inline void Submission::set_os(::std::string&& value) {
  
  os_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.os)
}
#endif
inline void Submission::set_os(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.os)
}
inline void Submission::set_os(const char* value, size_t size) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.os)
}
inline ::std::string* Submission::mutable_os() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_os() {
  // @@protoc_insertion_point(field_release:pb.Submission.os)
  
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    
  } else {
    
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.os)
}

// string problem = 21;
inline void Submission::clear_problem() {
  problem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::problem() const {
  // @@protoc_insertion_point(field_get:pb.Submission.problem)
  return problem_.GetNoArena();
}
inline void Submission::set_problem(const ::std::string& value) {
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.problem)
}
#if LANG_CXX11
inline void Submission::set_problem(::std::string&& value) {
  
  problem_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.problem)
}
#endif
inline void Submission::set_problem(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.problem)
}
inline void Submission::set_problem(const char* value, size_t size) {
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.problem)
}
inline ::std::string* Submission::mutable_problem() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.problem)
  return problem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_problem() {
  // @@protoc_insertion_point(field_release:pb.Submission.problem)
  
  return problem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_problem(::std::string* problem) {
  if (problem != NULL) {
    
  } else {
    
  }
  problem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), problem);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.problem)
}

// string instance = 22;
inline void Submission::clear_instance() {
  instance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::instance() const {
  // @@protoc_insertion_point(field_get:pb.Submission.instance)
  return instance_.GetNoArena();
}
inline void Submission::set_instance(const ::std::string& value) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.instance)
}
#if LANG_CXX11
inline void Submission::set_instance(::std::string&& value) {
  
  instance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.instance)
}
#endif
inline void Submission::set_instance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.instance)
}
inline void Submission::set_instance(const char* value, size_t size) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.instance)
}
inline ::std::string* Submission::mutable_instance() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.instance)
  return instance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_instance() {
  // @@protoc_insertion_point(field_release:pb.Submission.instance)
  
  return instance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_instance(::std::string* instance) {
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.instance)
}

// string duration = 23;
inline void Submission::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::duration() const {
  // @@protoc_insertion_point(field_get:pb.Submission.duration)
  return duration_.GetNoArena();
}
inline void Submission::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.duration)
}
#if LANG_CXX11
inline void Submission::set_duration(::std::string&& value) {
  
  duration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.duration)
}
#endif
inline void Submission::set_duration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.duration)
}
inline void Submission::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.duration)
}
inline ::std::string* Submission::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_duration() {
  // @@protoc_insertion_point(field_release:pb.Submission.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.duration)
}

// double obj = 31;
inline void Submission::clear_obj() {
  obj_ = 0;
}
inline double Submission::obj() const {
  // @@protoc_insertion_point(field_get:pb.Submission.obj)
  return obj_;
}
inline void Submission::set_obj(double value) {
  
  obj_ = value;
  // @@protoc_insertion_point(field_set:pb.Submission.obj)
}

// string email = 32;
inline void Submission::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::email() const {
  // @@protoc_insertion_point(field_get:pb.Submission.email)
  return email_.GetNoArena();
}
inline void Submission::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.email)
}
#if LANG_CXX11
inline void Submission::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.email)
}
#endif
inline void Submission::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.email)
}
inline void Submission::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.email)
}
inline ::std::string* Submission::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_email() {
  // @@protoc_insertion_point(field_release:pb.Submission.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.email)
}

// string date = 33;
inline void Submission::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::date() const {
  // @@protoc_insertion_point(field_get:pb.Submission.date)
  return date_.GetNoArena();
}
inline void Submission::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.date)
}
#if LANG_CXX11
inline void Submission::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.date)
}
#endif
inline void Submission::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.date)
}
inline void Submission::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.date)
}
inline ::std::string* Submission::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_date() {
  // @@protoc_insertion_point(field_release:pb.Submission.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_IncrementalGraphDrawing_2eproto
